// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Recipe {
  id          String       @id @default(uuid())
  name        String
  metadata    Metadata[]
  ingredients IngredientInstance[]
  method Method[]
  notes Note[]

  // To return `Date`s intact through the API we use transformers
  // https://trpc.io/docs/data-transformers
  // This is unique so it can be used for cursor-based pagination
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Metadata {
  id        String @id @default(uuid())
  recipe    Recipe @relation(fields: [recipieId], references: [id], onDelete: Cascade)
  recipieId String

  type  MetadataTypes
  value String
}

enum MetadataTypes {
  SERVINGS
  TIME_PREPARATION
  TIME_COOKING
  TEMPERATURE_OVEN
}

model Ingredient {
  id String @id @default(uuid())
  instances IngredientInstance[]

  name String
  unit String
  gramsConversion Float?

  @@unique([name, unit])
}

model IngredientInstance {
  id        String @id @default(uuid())
  recipe    Recipe @relation(fields: [recipieId], references: [id], onDelete: Cascade)
  recipieId String

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String

  amount String
}


model Method {
  id String @id @default(uuid())
  recipe    Recipe @relation(fields: [recipieId], references: [id], onDelete: Cascade)
  recipieId String

  text String
}

model Note {
  id String @id @default(uuid())
  recipe    Recipe @relation(fields: [recipieId], references: [id], onDelete: Cascade)
  recipieId String

  text String
}